package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.symboltable.*;
import lyc.compiler.symboltable.Symbol;
import java.util.List;
import java.util.ArrayList;
import lyc.compiler.terceto.Terceto;
import lyc.compiler.terceto.IntermediateCodeManager;
import lyc.compiler.terceto.CampoTerceto;

class Parser;

action code
{:
     public SymbolTableManager symbolTableManager = new SymbolTableManager();
     public ArrayList<String> varsList = new ArrayList();
     public IntermediateCodeManager intCodeManager = new IntermediateCodeManager();
     public Integer punteroTermAux = null;
     public Integer punteroExpAux = null;
:}
parser code
{:
    public List<Symbol> getSymbolsList() {
        return action_obj.symbolTableManager.getSymbolsList();
    }

    public List<Terceto> getTercetosList() {
        return action_obj.intCodeManager.getTercetosList();
    }

    public Integer crearTerceto(String operador, String operando1, String operando2)
    {
        return action_obj.intCodeManager.crearTerceto(operador, operando1, operando2);
    }

    public Integer crearTerceto(String valor)
    {
        return action_obj.intCodeManager.crearTerceto(valor);
    }

    public Integer crearTerceto(String operacion, String operando1)
    {
        return action_obj.intCodeManager.crearTerceto(operacion, operando1);
    }

    public void setPunteroTerceto(String puntero, Integer numeroTerceto)
    {
        action_obj.intCodeManager.setPunteroTerceto(puntero, numeroTerceto);
    }

    public Integer getNumeroTercetoFromPuntero(String puntero)
    {
        return action_obj.intCodeManager.getNumeroTercetoFromPuntero(puntero);
    }

    public String getStrNumeroTercetoFromPuntero(String puntero)
    {
        return action_obj.intCodeManager.getStrNumeroTercetoFromPuntero(puntero);
    }

    public void apilarPuntero(Integer puntero)
    {
        action_obj.intCodeManager.apilarPuntero(puntero);
    }

    public Integer desapilarPuntero()
    {
        return action_obj.intCodeManager.desapilarPuntero();
    }

    public void apilarLexema(String lexema)
    {
        action_obj.intCodeManager.apilarLexema(lexema);
    }

    public String desapilarLexema()
    {
        return action_obj.intCodeManager.desapilarLexema();
    }

    public void apilarComparador(String comparador)
    {
        action_obj.intCodeManager.apilarComparador(comparador);
    }

    public String desapilarComparador()
    {
        return action_obj.intCodeManager.desapilarComparador();
    }

    public Integer getUltimoNumeroTerceto()
    {
        return action_obj.intCodeManager.getUltimoNumeroTerceto();
    }

    public void actualizarTerceto(Integer numeroTerceto, CampoTerceto campo, String valor)
    {
        action_obj.intCodeManager.actualizarTerceto(numeroTerceto, campo, valor);
    }

    public Integer topePilaPunteros()
    {
        return action_obj.intCodeManager.topePilaPunteros();
    }

    public void apilarCondSuf(Integer puntero)
    {
        action_obj.intCodeManager.apilarCondSuf(puntero);
    }

    public Integer desapilarCondSuf()
    {
        return action_obj.intCodeManager.desapilarCondSuf();
    }

    public Boolean hayCondicionesSuficientes()
    {
        return action_obj.intCodeManager.hayCondicionesSuficientes();
    }

    public String getComparadorInverso(String comparador)
    {
        return action_obj.intCodeManager.getComparadorInverso(comparador);
    }
:}

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal HIGHER;
terminal LOWER;
terminal HIGHER_EQUAL;
terminal LOWER_EQUAL;
terminal AND;
terminal OR;
terminal NOT;
terminal DISTINCT;
terminal INCREMENT;
terminal DECREMENT;
terminal TRUE_BOOL;
terminal FALSE_BOOL;
terminal COMMA;
terminal POINT;
terminal COLON;
terminal SEMICOLON;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;

terminal CONTAR_PRIMOS;
terminal BUSCO_Y_REEMPLAZO;
terminal SI;
terminal SINO;
terminal FOR;
terminal BEGIN;
terminal END;
terminal EQUAL;
terminal INIT;
terminal ESCRIBIR;
terminal LEER;
terminal FLOAT;
terminal INT;
terminal STRING;
terminal MIENTRAS;
terminal SWITCH;
terminal CASE;

// Non Terminals
non terminal program;
non terminal block;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal expression_list;
non terminal term;
non terminal factor;
non terminal conditional;
non terminal condition;
non terminal data;
non terminal vardeclaration;
non terminal declarationslist;
non terminal declaration;
non terminal varslist;
non terminal var;
non terminal vartype;
non terminal contarprimos;
// non terminal string_data;
non terminal buscoyreemplazo;

// Start Symbol Definition
//start with sentence;   Cambio el StartSymbol para permitir entradas multilinea
start with program;

program ::= block  {:
    System.out.println("Program End");
    setPunteroTerceto("program", getNumeroTercetoFromPuntero("block"));
    intCodeManager.mostrarTercetos();
 :};

program ::= -1;

block ::= block sentence{: System.out.println("Block Sentence"); :};
block ::= sentence
{:
    System.out.println("Block");
    setPunteroTerceto("block", getNumeroTercetoFromPuntero("sentence"));
:};

sentence ::= assignment
{:
    System.out.println("Sentence");
    setPunteroTerceto("sentence", getNumeroTercetoFromPuntero("assignment"));
:};
assignment ::= IDENTIFIER:id ASSIG expression
{:
    System.out.println(id+" = Assignment");
    String strId = id.toString();
    Integer numTercetoId = crearTerceto(strId);
    setPunteroTerceto("assignment",
        crearTerceto(":=", "#" + numTercetoId.toString(),
        getStrNumeroTercetoFromPuntero("expression")));
:};
assignment ::= IDENTIFIER:id ASSIG SUB INTEGER_CONSTANT:constant
{:
    String strConstant = constant.toString();
    Integer integer = Integer.valueOf(strConstant);
    integer = (-1) * integer;
    symbolTableManager.addSymbol("_-" + strConstant, integer);
    System.out.println(id+" = Constant assignment: " + constant);
    String strId = id.toString();
    Integer numTercetoId = crearTerceto(strId);
    Integer numTercetoConstant = crearTerceto(integer.toString());
    setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoId.toString(), "#" + numTercetoConstant.toString()));
:};
assignment ::= IDENTIFIER:id ASSIG STRING_CONSTANT:constant
{:
    String strConstant = constant.toString();
    symbolTableManager.addSymbol("_" + strConstant, strConstant);
    String strId = id.toString();
    symbolTableManager.setVarValue(strId, strConstant);
    System.out.println(id+" = Constant assignment: " + constant);
    Integer numTercetoId = crearTerceto(strId);
    Integer numTercetoConstant = crearTerceto(strConstant);
    setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoId.toString(), "#" + numTercetoConstant.toString()));
:};
assignment ::= IDENTIFIER:id ASSIG SUB FLOAT_CONSTANT:constant
{:
    String strConstant = constant.toString();
    Double float_value = Double.valueOf(strConstant);
    float_value = (-1) * float_value;
    symbolTableManager.addSymbol("_-" + strConstant, float_value);
    System.out.println(id+" = Float constant assignment: " + constant);
    String strId = id.toString();
    Integer numTercetoId = crearTerceto(strId);
    Integer numTercetoConstant = crearTerceto(float_value.toString());
    setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoId.toString(), "#" + numTercetoConstant.toString()));
:};
assignment ::= IDENTIFIER:id ASSIG FLOAT_CONSTANT:constant
{:
    String strConstant = constant.toString();
    Double float_value = Double.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, float_value);
    System.out.println(id+" = Float constant assignment: " + constant);
    String strId = id.toString();
    Integer numTercetoId = crearTerceto(strId);
    Integer numTercetoConstant = crearTerceto(strConstant);
    setPunteroTerceto("assignment", crearTerceto(":=", "#" + numTercetoId.toString(), "#" + numTercetoConstant.toString()));
:};
expression_list ::= expression
{:
    System.out.println("expression_list = expression");
    setPunteroTerceto("expression_list", getNumeroTercetoFromPuntero("expression"));
:};
expression ::= expression PLUS term
{:
    System.out.println("+");
    setPunteroTerceto("expression",
        crearTerceto("+", getStrNumeroTercetoFromPuntero("expression"),
        getStrNumeroTercetoFromPuntero("term")));
:};
expression ::= expression SUB term
{:
    System.out.println("-");
    setPunteroTerceto("expression",
        crearTerceto("-", getStrNumeroTercetoFromPuntero("expression"),
        getStrNumeroTercetoFromPuntero("term")));
:};
expression ::= term
{:
    System.out.println("Expression = Term");
    setPunteroTerceto("expression", getNumeroTercetoFromPuntero("term"));
:};
term ::= term MULT factor
{:
    System.out.println("*");
    setPunteroTerceto("term",
        crearTerceto("*", getStrNumeroTercetoFromPuntero("term"),
        getStrNumeroTercetoFromPuntero("factor")));
:};
term ::= term DIV factor
{:
    System.out.println("/");
    setPunteroTerceto("term",
        crearTerceto("/", getStrNumeroTercetoFromPuntero("term"),
        getStrNumeroTercetoFromPuntero("factor")));
:};
term ::= factor
{:
    System.out.println("Term = factor");
    setPunteroTerceto("term", getNumeroTercetoFromPuntero("factor"));
:};
factor ::= IDENTIFIER:id
{:
    System.out.println("Id: " + id);
    String strId = id.toString();
    setPunteroTerceto("factor", crearTerceto(strId));
:};
factor ::= INTEGER_CONSTANT:constant
{:
    String strConstant = constant.toString();
    Integer integer = Integer.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, integer);
    System.out.println(" integer: " + strConstant);
    setPunteroTerceto("factor", crearTerceto(strConstant));
:};
factor ::= OPEN_BRACKET
    {:
        apilarPuntero(getNumeroTercetoFromPuntero("term"));
        apilarPuntero(getNumeroTercetoFromPuntero("expression"));
    :}
    expression CLOSE_BRACKET
    {:
        System.out.println("Factor = (Expression)");
        setPunteroTerceto("factor", getNumeroTercetoFromPuntero("expression"));
        setPunteroTerceto("expression", desapilarPuntero());
        setPunteroTerceto("term", desapilarPuntero());
    :};
//Agregado de temas comunes
sentence ::= ESCRIBIR OPEN_BRACKET data CLOSE_BRACKET {:
    System.out.println("ESCRIBIR:");
:};
data ::= INTEGER_CONSTANT:integer_constant
{:
    String strConstant = integer_constant.toString();
    Integer integer = Integer.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, integer);
    System.out.println(" integer: " + integer_constant);
    setPunteroTerceto("data", crearTerceto(strConstant));
:};
data ::= FLOAT_CONSTANT:float_constant
{:
    String strConstant = float_constant.toString();
    Double float_value = Double.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, float_value);
    System.out.println(" float: " + float_constant);
    setPunteroTerceto("data", crearTerceto(strConstant));
:};
//data ::= string_data
//{:
//    String strConstant = stringConstant.toString();
//    symbolTableManager.addSymbol("_" + strConstant, strConstant);
//    System.out.println("data as string data");
//:};
data ::= IDENTIFIER:id
{:
    System.out.println(" id: " + id);
    String strId = id.toString();
    setPunteroTerceto("data", crearTerceto(strId));
:};
//string_data ::= STRING_CONSTANT:constant
//{:
//    String strConstant = constant.toString();
//    symbolTableManager.addSymbol("_" + strConstant, strConstant);
//    System.out.println(" string data: " + constant);
//:};
//string_data ::= IDENTIFIER:id
//{:
//    System.out.println(" string data as id: " + id);
//:};
sentence ::= LEER OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {:
    System.out.println("LEER: " + id);
:};

sentence ::= vardeclaration
{:
    System.out.println("Sentencia de declaracion de variables");
:};

vardeclaration ::= INIT OPEN_CURLY_BRACKET declarationslist CLOSE_CURLY_BRACKET
{:
    System.out.println("Declaracion de variables");
:};

declarationslist ::= declarationslist declaration
{:
    System.out.println("Lista de declaraciones");
:};

declarationslist ::= declaration
{:
    System.out.println("Declaracion");
:};

declaration ::= varslist COLON vartype
{:
    System.out.println("Declaracion");
:};

varslist ::= varslist COMMA var
{:
    System.out.println("Lista de variables");
:};

varslist ::= var
{:
    System.out.println("Variable");
:};

var ::= IDENTIFIER:id
{:
    this.varsList.add(id.toString());
    System.out.println("Variable: " + id);
:};

vartype ::= INT
{:
    symbolTableManager.addVars(this.varsList, DataType.INTEGER);
    System.out.println("Entero");
:};

vartype ::= FLOAT
{:
    symbolTableManager.addVars(this.varsList, DataType.FLOAT);
    System.out.println("Flotante");
:};

vartype ::= STRING
{:
    symbolTableManager.addVars(this.varsList, DataType.STRING);
    System.out.println("Cadena");
:};

sentence ::= SI conditional OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET
{:
    System.out.println("if");
    Integer numeroTercetoSalto = getUltimoNumeroTerceto() + 1;
    while(hayCondicionesSuficientes())
    {
        actualizarTerceto(desapilarCondSuf(), CampoTerceto.SEGUNDO_ELEM, "#" + numeroTercetoSalto.toString());
    }
    System.out.println("fin if");
:};
sentence ::= SI conditional OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET SINO OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET{:
    System.out.println("if");
:};

sentence ::= MIENTRAS conditional OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET{:
    System.out.println("while");
:};

conditional ::= OPEN_BRACKET condition {:setPunteroTerceto("conditional", getNumeroTercetoFromPuntero("condition"));:}
    AND condition CLOSE_BRACKET
    {:
        apilarCondSuf(desapilarPuntero());
        apilarCondSuf(desapilarPuntero());
        System.out.println("and conditional");
    :};
conditional ::= OPEN_BRACKET condition {:setPunteroTerceto("conditional", getNumeroTercetoFromPuntero("condition"));:}
    OR condition CLOSE_BRACKET
    {:
        Integer numeroTercetoSegundaCondicion = desapilarPuntero();
        Integer numeroTercetoPrimeraCondicion = desapilarPuntero();
        actualizarTerceto(numeroTercetoPrimeraCondicion, CampoTerceto.SEGUNDO_ELEM, "#" + getNumeroTercetoFromPuntero("condition"));
        apilarCondSuf(numeroTercetoSegundaCondicion);
        System.out.println("or conditional");
    :};
conditional ::= OPEN_BRACKET NOT condition CLOSE_BRACKET {:
    actualizarTerceto(desapilarPuntero(), CampoTerceto.PRIMER_ELEM, getComparadorInverso(desapilarComparador()));
    System.out.println("single conditional  not");
:};
conditional ::= OPEN_BRACKET condition CLOSE_BRACKET {:
    System.out.println("single conditional");
    setPunteroTerceto("conditional", getNumeroTercetoFromPuntero("condition"));
    apilarCondSuf(desapilarPuntero());
:};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} EQUAL factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BNE", "_"));
            apilarComparador("BNE");
        :};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} DISTINCT factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BEQ", "_"));
            apilarComparador("BEQ");
        :};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} HIGHER factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BLE", "_"));
            apilarComparador("BLE");
        :};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} HIGHER_EQUAL factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BLT", "_"));
            apilarComparador("BLT");
        :};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} LOWER factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BGE", "_"));
            apilarComparador("BGE");
        :};

condition ::= factor
{:
    apilarPuntero(getNumeroTercetoFromPuntero("factor"));
:} LOWER_EQUAL factor
        {:
            System.out.println("condition");
            setPunteroTerceto("condition",
            crearTerceto("CMP", "#" + desapilarPuntero().toString(), getStrNumeroTercetoFromPuntero("factor")));
            apilarPuntero(crearTerceto("BGT", "_"));
            apilarComparador("BGT");
        :};

//Agrego temas especiales
sentence ::= contarprimos
{:
    System.out.println("ContarPrimos");
:};

contarprimos ::= CONTAR_PRIMOS OPEN_BRACKET OPEN_SQUARE_BRACKET expression_list  CLOSE_SQUARE_BRACKET CLOSE_BRACKET{:
    System.out.println("ContarPrimos");
:};
expression_list ::= expression_list COMMA expression {:
    System.out.println("expression_list = expression_list Comma expression");
:};

sentence ::= buscoyreemplazo
{:
    System.out.println("BuscoYReemplazo");
:};

buscoyreemplazo ::= BUSCO_Y_REEMPLAZO OPEN_BRACKET data COMMA data COMMA data CLOSE_BRACKET SEMICOLON{:
    System.out.println("BuscoYReemplazo");
:};

assignment ::= IDENTIFIER:id ASSIG contarprimos
{:
    System.out.println(id+" = Contarprimos assignment");
:};

assignment ::= IDENTIFIER:id ASSIG buscoyreemplazo
{:
    System.out.println(id+" = Buscoyreemplazo assignment");
:};