package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.symboltable.*;
import lyc.compiler.symboltable.Symbol;
import java.util.List;
import java.util.ArrayList;

class Parser;

action code
{:
     public SymbolTableManager symbolTableManager = new SymbolTableManager();
     public ArrayList<String> varsList = new ArrayList();
:}
parser code
{:
    public List<Symbol> getSymbolsList() {
        return action_obj.symbolTableManager.getSymbolsList();
    }
:}

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal HIGHER;
terminal LOWER;
terminal HIGHER_EQUAL;
terminal LOWER_EQUAL;
terminal AND;
terminal OR;
terminal NOT;
terminal DISTINCT;
terminal INCREMENT;
terminal DECREMENT;
terminal TRUE_BOOL;
terminal FALSE_BOOL;
terminal COMMA;
terminal POINT;
terminal COLON;
terminal SEMICOLON;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;

terminal SI;
terminal SINO;
terminal FOR;
terminal BEGIN;
terminal END;
terminal EQUAL;
terminal INIT;
terminal ESCRIBIR;
terminal LEER;
terminal FLOAT;
terminal INT;
terminal STRING;
terminal MIENTRAS;
terminal SWITCH;
terminal CASE;

// Non Terminals
non terminal program;
non terminal block;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal conditional;
non terminal condition;
non terminal data;
non terminal vardeclaration;
non terminal declarationslist;
non terminal declaration;
non terminal varslist;
non terminal var;
non terminal vartype;

// Start Symbol Definition
//start with sentence;   Cambio el StartSymbol para permitir entradas multilinea
start with program;

program ::= block  {:
    System.out.println("Program End");
 :};

block ::= block sentence{: System.out.println("Block Sentence"); :};
block ::= sentence{: System.out.println("Block"); :};

sentence ::= assignment {: System.out.println("Sentence"); :};
assignment ::= IDENTIFIER:id ASSIG expression {: System.out.println(id+" = Assignment"); :};
assignment ::= IDENTIFIER:id ASSIG STRING_CONSTANT:constant
{:
    String strConstant = constant.toString();
    symbolTableManager.addSymbol("_" + strConstant, strConstant);
    System.out.println(id+" = Constant assignment: " + constant);
:};
assignment ::= IDENTIFIER:id ASSIG FLOAT_CONSTANT:constant
{:
    String strConstant = constant.toString();
    Double float_value = Double.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, float_value);
    System.out.println(id+" = Float constant assignment: " + constant);
:};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant
{:
    String strConstant = constant.toString();
    Integer integer = Integer.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, integer);
    System.out.println(" integer: " + strConstant);
:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
//Agregado de temas comunes
sentence ::= ESCRIBIR OPEN_BRACKET data CLOSE_BRACKET {:
    System.out.println("ESCRIBIR:");
:};
data ::= INTEGER_CONSTANT:integer_constant
{:
    String strConstant = integer_constant.toString();
    Integer integer = Integer.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, integer);
    System.out.println(" integer: " + integer_constant);
:};
data ::= FLOAT_CONSTANT:float_constant
{:
    String strConstant = float_constant.toString();
    Double float_value = Double.valueOf(strConstant);
    symbolTableManager.addSymbol("_" + strConstant, float_value);
    System.out.println(" float: " + float_constant);
:};
data ::= STRING_CONSTANT:stringConstant
{:
    String strConstant = stringConstant.toString();
    symbolTableManager.addSymbol("_" + strConstant, strConstant);
    System.out.println(" string: " + stringConstant);
:};
data ::= IDENTIFIER:id
{:
    System.out.println(" id: " + id);
:};

sentence ::= vardeclaration
{:
    System.out.println("Sentencia de declaracion de variables");
:};

vardeclaration ::= INIT OPEN_CURLY_BRACKET declarationslist CLOSE_CURLY_BRACKET
{:
    System.out.println("Declaracion de variables");
:};

declarationslist ::= declarationslist declaration
{:
    System.out.println("Lista de declaraciones");
:};

declarationslist ::= declaration
{:
    System.out.println("Declaracion");
:};

declaration ::= varslist COLON vartype
{:
    System.out.println("Declaracion");
:};

varslist ::= varslist COMMA var
{:
    System.out.println("Lista de variables");
:};

varslist ::= var
{:
    System.out.println("Variable");
:};

var ::= IDENTIFIER:id
{:
    this.varsList.add(id.toString());
    System.out.println("Variable: " + id);
:};

vartype ::= INT
{:
    symbolTableManager.addVars(this.varsList, DataType.INTEGER);
    System.out.println("Entero");
:};

vartype ::= FLOAT
{:
    symbolTableManager.addVars(this.varsList, DataType.FLOAT);
    System.out.println("Flotante");
:};

vartype ::= STRING
{:
    symbolTableManager.addVars(this.varsList, DataType.STRING);
    System.out.println("Cadena");
:};

sentence ::= LEER OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {:
    System.out.println("LEER: " + id);
:};

sentence ::= SI conditional OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET
{:
    System.out.println("if");
:};
sentence ::= SI conditional OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET SINO OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET{:
    System.out.println("if");
:};

sentence ::= MIENTRAS conditional OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET{:
    System.out.println("while");
:};

conditional ::= OPEN_BRACKET condition AND condition CLOSE_BRACKET {:
    System.out.println("and conditional");
:};
conditional ::= OPEN_BRACKET condition OR condition CLOSE_BRACKET {:
    System.out.println("or conditional");
:};
conditional ::= OPEN_BRACKET NOT condition CLOSE_BRACKET {:
    System.out.println("single conditional  not");
:};
conditional ::= OPEN_BRACKET condition CLOSE_BRACKET {:
    System.out.println("single conditional");
:};

condition ::= factor EQUAL factor {:
    System.out.println("condition");
:};

condition ::= factor DISTINCT factor {:
    System.out.println("condition");
:};

condition ::= factor HIGHER factor {:
     System.out.println("condition");
:};

condition ::= factor HIGHER_EQUAL factor {:
    System.out.println("condition");
:};

condition ::= factor LOWER factor {:
    System.out.println("condition");
:};

condition ::= factor LOWER_EQUAL factor {:
    System.out.println("condition");
:};